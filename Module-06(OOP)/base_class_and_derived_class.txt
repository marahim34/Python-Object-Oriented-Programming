Base Class and Derived Class Explanation
-----------------------------------------

What is a Base Class?
---------------------
A base class (or parent class) is a general class that contains common attributes 
and methods that other classes can inherit. It acts as a blueprint for derived classes.

What is a Derived Class?
------------------------
A derived class (or child class) is a specialized class that inherits the properties 
and methods of a base class. It can also extend or modify the behavior of the base class by:
1. Adding new methods or attributes.
2. Overriding methods from the base class.

Relationship Between Base and Derived Classes
---------------------------------------------
1. Inheritance: The derived class automatically inherits the properties and methods 
   of the base class, eliminating the need to redefine common behaviors.
2. Polymorphism: A derived class can override base class methods to provide specialized 
   behavior. The same method can produce different results based on the object calling it.
3. Code Reusability: Base classes allow common functionality to be written once 
   and reused in derived classes.

Example: Zoo Management System
-------------------------------
Imagine a zoo management system with:
1. A base class `Animal` representing general attributes and behaviors shared by all animals.
2. A derived class `Dog` for dogs, adding specific behaviors like barking.
3. A derived class `Cat` for cats, adding specific behaviors like meowing.

Code Example
------------
# Base class
class Animal:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def make_sound(self):
        return "Some generic animal sound"

    def info(self):
        return f"I am {self.name}, and I am {self.age} years old."

# Derived class 1
class Dog(Animal):
    def __init__(self, name, age, breed):
        super().__init__(name, age)  # Call the base class constructor
        self.breed = breed

    def make_sound(self):
        return "Bark!"

    def info(self):
        return f"I am {self.name}, a {self.age}-year-old {self.breed}."

# Derived class 2
class Cat(Animal):
    def __init__(self, name, age, color):
        super().__init__(name, age)  # Call the base class constructor
        self.color = color

    def make_sound(self):
        return "Meow!"

    def info(self):
        return f"I am {self.name}, a {self.age}-year-old {self.color} cat."

# Using the classes
generic_animal = Animal("Unknown", 5)
print(generic_animal.info())
print(f"Sound: {generic_animal.make_sound()}")

dog = Dog("Buddy", 3, "Golden Retriever")
print(dog.info())
print(f"Sound: {dog.make_sound()}")

cat = Cat("Whiskers", 2, "black")
print(cat.info())
print(f"Sound: {cat.make_sound()}")

Output
------
I am Unknown, and I am 5 years old.
Sound: Some generic animal sound
I am Buddy, a 3-year-old Golden Retriever.
Sound: Bark!
I am Whiskers, a 2-year-old black cat.
Sound: Meow!

Explanation
-----------
1. Base Class `Animal`:
   - Defines general attributes (`name`, `age`) and methods (`make_sound`, `info`) 
     for all animals.
   - Acts as a foundation for more specialized classes.

2. Derived Class `Dog`:
   - Inherits all attributes and methods from `Animal`.
   - Adds a new attribute `breed`.
   - Overrides the `make_sound()` method to return "Bark!" instead of the generic sound.
   - Overrides the `info()` method to include the breed in the description.

3. Derived Class `Cat`:
   - Inherits all attributes and methods from `Animal`.
   - Adds a new attribute `color`.
   - Overrides the `make_sound()` method to return "Meow!" instead of the generic sound.
   - Overrides the `info()` method to include the color in the description.

4. Polymorphism:
   - Both `Dog` and `Cat` override `make_sound()` to provide specific sounds, 
     demonstrating polymorphism.

Advantages
----------
1. Code Reusability: Common functionality like `info()` is written once in the base class.
2. Specialization: Each derived class adds unique characteristics and behavior.
3. Hierarchy: The relationship between `Animal`, `Dog`, and `Cat` follows a clear hierarchy.

This example illustrates how base classes and derived classes work together, 
leveraging inheritance to create efficient and reusable code.
